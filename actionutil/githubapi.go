// Autogenerated by go run internal/genapi/main.go. DO NOT EDIT.

package actionutil

import (
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"time"

	"github.com/google/go-github/v31/github"
	"github.com/posener/goaction"
	"golang.org/x/oauth2"
)

// Client is a small wrapper around github.Client, that does not require to repeatedly type the
// owner and repository in various function calls.
type Client struct {
	*github.Client
	Owner   string
	Project string
}

// NewClient returns a github client.
func NewClient(c *http.Client) *Client {
	return &Client{
		Client:  github.NewClient(c),
		Owner:   goaction.Owner(),
		Project: goaction.Project(),
	}
}

// NewClientWithToken returns a github client from a given auth token, according to
// https://github.com/google/go-github#authentication.
func NewClientWithToken(ctx context.Context, token string) *Client {
	ts := oauth2.StaticTokenSource(&oauth2.Token{AccessToken: token})
	return NewClient(oauth2.NewClient(ctx, ts))
}

func (c *Client) ActionsListWorkflowRunArtifacts(ctx context.Context, runID int64, opts *github.ListOptions) (*github.ArtifactList, *github.Response, error) {
	return c.Actions.ListWorkflowRunArtifacts(ctx, c.Owner, c.Project, runID, opts)
}

func (c *Client) ActionsGetArtifact(ctx context.Context, artifactID int64) (*github.Artifact, *github.Response, error) {
	return c.Actions.GetArtifact(ctx, c.Owner, c.Project, artifactID)
}

func (c *Client) ActionsDownloadArtifact(ctx context.Context, artifactID int64, followRedirects bool) (*url.URL, *github.Response, error) {
	return c.Actions.DownloadArtifact(ctx, c.Owner, c.Project, artifactID, followRedirects)
}

func (c *Client) ActionsDeleteArtifact(ctx context.Context, artifactID int64) (*github.Response, error) {
	return c.Actions.DeleteArtifact(ctx, c.Owner, c.Project, artifactID)
}

func (c *Client) ActionsListRunnerApplicationDownloads(ctx context.Context) ([]*github.RunnerApplicationDownload, *github.Response, error) {
	return c.Actions.ListRunnerApplicationDownloads(ctx, c.Owner, c.Project)
}

func (c *Client) ActionsCreateRegistrationToken(ctx context.Context) (*github.RegistrationToken, *github.Response, error) {
	return c.Actions.CreateRegistrationToken(ctx, c.Owner, c.Project)
}

func (c *Client) ActionsListRunners(ctx context.Context, opts *github.ListOptions) (*github.Runners, *github.Response, error) {
	return c.Actions.ListRunners(ctx, c.Owner, c.Project, opts)
}

func (c *Client) ActionsGetRunner(ctx context.Context, runnerID int64) (*github.Runner, *github.Response, error) {
	return c.Actions.GetRunner(ctx, c.Owner, c.Project, runnerID)
}

func (c *Client) ActionsCreateRemoveToken(ctx context.Context) (*github.RemoveToken, *github.Response, error) {
	return c.Actions.CreateRemoveToken(ctx, c.Owner, c.Project)
}

func (c *Client) ActionsRemoveRunner(ctx context.Context, runnerID int64) (*github.Response, error) {
	return c.Actions.RemoveRunner(ctx, c.Owner, c.Project, runnerID)
}

func (c *Client) ActionsGetPublicKey(ctx context.Context) (*github.PublicKey, *github.Response, error) {
	return c.Actions.GetPublicKey(ctx, c.Owner, c.Project)
}

func (c *Client) ActionsListSecrets(ctx context.Context, opts *github.ListOptions) (*github.Secrets, *github.Response, error) {
	return c.Actions.ListSecrets(ctx, c.Owner, c.Project, opts)
}

func (c *Client) ActionsGetSecret(ctx context.Context, name string) (*github.Secret, *github.Response, error) {
	return c.Actions.GetSecret(ctx, c.Owner, c.Project, name)
}

func (c *Client) ActionsCreateOrUpdateSecret(ctx context.Context, eSecret *github.EncryptedSecret) (*github.Response, error) {
	return c.Actions.CreateOrUpdateSecret(ctx, c.Owner, c.Project, eSecret)
}

func (c *Client) ActionsDeleteSecret(ctx context.Context, name string) (*github.Response, error) {
	return c.Actions.DeleteSecret(ctx, c.Owner, c.Project, name)
}

func (c *Client) ActionsListWorkflowJobs(ctx context.Context, runID int64, opts *github.ListWorkflowJobsOptions) (*github.Jobs, *github.Response, error) {
	return c.Actions.ListWorkflowJobs(ctx, c.Owner, c.Project, runID, opts)
}

func (c *Client) ActionsGetWorkflowJobByID(ctx context.Context, jobID int64) (*github.WorkflowJob, *github.Response, error) {
	return c.Actions.GetWorkflowJobByID(ctx, c.Owner, c.Project, jobID)
}

func (c *Client) ActionsGetWorkflowJobLogs(ctx context.Context, jobID int64, followRedirects bool) (*url.URL, *github.Response, error) {
	return c.Actions.GetWorkflowJobLogs(ctx, c.Owner, c.Project, jobID, followRedirects)
}

func (c *Client) ActionsListWorkflowRunsByID(ctx context.Context, workflowID int64, opts *github.ListWorkflowRunsOptions) (*github.WorkflowRuns, *github.Response, error) {
	return c.Actions.ListWorkflowRunsByID(ctx, c.Owner, c.Project, workflowID, opts)
}

func (c *Client) ActionsListWorkflowRunsByFileName(ctx context.Context, workflowFileName string, opts *github.ListWorkflowRunsOptions) (*github.WorkflowRuns, *github.Response, error) {
	return c.Actions.ListWorkflowRunsByFileName(ctx, c.Owner, c.Project, workflowFileName, opts)
}

func (c *Client) ActionsListRepositoryWorkflowRuns(ctx context.Context, opts *github.ListOptions) (*github.WorkflowRuns, *github.Response, error) {
	return c.Actions.ListRepositoryWorkflowRuns(ctx, c.Owner, c.Project, opts)
}

func (c *Client) ActionsGetWorkflowRunByID(ctx context.Context, runID int64) (*github.WorkflowRun, *github.Response, error) {
	return c.Actions.GetWorkflowRunByID(ctx, c.Owner, c.Project, runID)
}

func (c *Client) ActionsRerunWorkflowByID(ctx context.Context, runID int64) (*github.Response, error) {
	return c.Actions.RerunWorkflowByID(ctx, c.Owner, c.Project, runID)
}

func (c *Client) ActionsCancelWorkflowRunByID(ctx context.Context, runID int64) (*github.Response, error) {
	return c.Actions.CancelWorkflowRunByID(ctx, c.Owner, c.Project, runID)
}

func (c *Client) ActionsGetWorkflowRunLogs(ctx context.Context, runID int64, followRedirects bool) (*url.URL, *github.Response, error) {
	return c.Actions.GetWorkflowRunLogs(ctx, c.Owner, c.Project, runID, followRedirects)
}

func (c *Client) ActionsListWorkflows(ctx context.Context, opts *github.ListOptions) (*github.Workflows, *github.Response, error) {
	return c.Actions.ListWorkflows(ctx, c.Owner, c.Project, opts)
}

func (c *Client) ActionsGetWorkflowByID(ctx context.Context, workflowID int64) (*github.Workflow, *github.Response, error) {
	return c.Actions.GetWorkflowByID(ctx, c.Owner, c.Project, workflowID)
}

func (c *Client) ActionsGetWorkflowByFileName(ctx context.Context, workflowFileName string) (*github.Workflow, *github.Response, error) {
	return c.Actions.GetWorkflowByFileName(ctx, c.Owner, c.Project, workflowFileName)
}

func (c *Client) ActivityListRepositoryEvents(ctx context.Context, opts *github.ListOptions) ([]*github.Event, *github.Response, error) {
	return c.Activity.ListRepositoryEvents(ctx, c.Owner, c.Project, opts)
}

func (c *Client) ActivityListIssueEventsForRepository(ctx context.Context, opts *github.ListOptions) ([]*github.IssueEvent, *github.Response, error) {
	return c.Activity.ListIssueEventsForRepository(ctx, c.Owner, c.Project, opts)
}

func (c *Client) ActivityListEventsForRepoNetwork(ctx context.Context, opts *github.ListOptions) ([]*github.Event, *github.Response, error) {
	return c.Activity.ListEventsForRepoNetwork(ctx, c.Owner, c.Project, opts)
}

func (c *Client) ActivityListRepositoryNotifications(ctx context.Context, opts *github.NotificationListOptions) ([]*github.Notification, *github.Response, error) {
	return c.Activity.ListRepositoryNotifications(ctx, c.Owner, c.Project, opts)
}

func (c *Client) ActivityMarkRepositoryNotificationsRead(ctx context.Context, lastRead time.Time) (*github.Response, error) {
	return c.Activity.MarkRepositoryNotificationsRead(ctx, c.Owner, c.Project, lastRead)
}

func (c *Client) ActivityListStargazers(ctx context.Context, opts *github.ListOptions) ([]*github.Stargazer, *github.Response, error) {
	return c.Activity.ListStargazers(ctx, c.Owner, c.Project, opts)
}

func (c *Client) ActivityIsStarred(ctx context.Context) (bool, *github.Response, error) {
	return c.Activity.IsStarred(ctx, c.Owner, c.Project)
}

func (c *Client) ActivityStar(ctx context.Context) (*github.Response, error) {
	return c.Activity.Star(ctx, c.Owner, c.Project)
}

func (c *Client) ActivityUnstar(ctx context.Context) (*github.Response, error) {
	return c.Activity.Unstar(ctx, c.Owner, c.Project)
}

func (c *Client) ActivityListWatchers(ctx context.Context, opts *github.ListOptions) ([]*github.User, *github.Response, error) {
	return c.Activity.ListWatchers(ctx, c.Owner, c.Project, opts)
}

func (c *Client) ActivityGetRepositorySubscription(ctx context.Context) (*github.Subscription, *github.Response, error) {
	return c.Activity.GetRepositorySubscription(ctx, c.Owner, c.Project)
}

func (c *Client) ActivitySetRepositorySubscription(ctx context.Context, subscription *github.Subscription) (*github.Subscription, *github.Response, error) {
	return c.Activity.SetRepositorySubscription(ctx, c.Owner, c.Project, subscription)
}

func (c *Client) ActivityDeleteRepositorySubscription(ctx context.Context) (*github.Response, error) {
	return c.Activity.DeleteRepositorySubscription(ctx, c.Owner, c.Project)
}

func (c *Client) AppsFindRepositoryInstallation(ctx context.Context) (*github.Installation, *github.Response, error) {
	return c.Apps.FindRepositoryInstallation(ctx, c.Owner, c.Project)
}

func (c *Client) ChecksGetCheckRun(ctx context.Context, checkRunID int64) (*github.CheckRun, *github.Response, error) {
	return c.Checks.GetCheckRun(ctx, c.Owner, c.Project, checkRunID)
}

func (c *Client) ChecksGetCheckSuite(ctx context.Context, checkSuiteID int64) (*github.CheckSuite, *github.Response, error) {
	return c.Checks.GetCheckSuite(ctx, c.Owner, c.Project, checkSuiteID)
}

func (c *Client) ChecksCreateCheckRun(ctx context.Context, opts github.CreateCheckRunOptions) (*github.CheckRun, *github.Response, error) {
	return c.Checks.CreateCheckRun(ctx, c.Owner, c.Project, opts)
}

func (c *Client) ChecksUpdateCheckRun(ctx context.Context, checkRunID int64, opts github.UpdateCheckRunOptions) (*github.CheckRun, *github.Response, error) {
	return c.Checks.UpdateCheckRun(ctx, c.Owner, c.Project, checkRunID, opts)
}

func (c *Client) ChecksListCheckRunAnnotations(ctx context.Context, checkRunID int64, opts *github.ListOptions) ([]*github.CheckRunAnnotation, *github.Response, error) {
	return c.Checks.ListCheckRunAnnotations(ctx, c.Owner, c.Project, checkRunID, opts)
}

func (c *Client) ChecksListCheckRunsForRef(ctx context.Context, ref string, opts *github.ListCheckRunsOptions) (*github.ListCheckRunsResults, *github.Response, error) {
	return c.Checks.ListCheckRunsForRef(ctx, c.Owner, c.Project, ref, opts)
}

func (c *Client) ChecksListCheckRunsCheckSuite(ctx context.Context, checkSuiteID int64, opts *github.ListCheckRunsOptions) (*github.ListCheckRunsResults, *github.Response, error) {
	return c.Checks.ListCheckRunsCheckSuite(ctx, c.Owner, c.Project, checkSuiteID, opts)
}

func (c *Client) ChecksListCheckSuitesForRef(ctx context.Context, ref string, opts *github.ListCheckSuiteOptions) (*github.ListCheckSuiteResults, *github.Response, error) {
	return c.Checks.ListCheckSuitesForRef(ctx, c.Owner, c.Project, ref, opts)
}

func (c *Client) ChecksSetCheckSuitePreferences(ctx context.Context, opts github.CheckSuitePreferenceOptions) (*github.CheckSuitePreferenceResults, *github.Response, error) {
	return c.Checks.SetCheckSuitePreferences(ctx, c.Owner, c.Project, opts)
}

func (c *Client) ChecksCreateCheckSuite(ctx context.Context, opts github.CreateCheckSuiteOptions) (*github.CheckSuite, *github.Response, error) {
	return c.Checks.CreateCheckSuite(ctx, c.Owner, c.Project, opts)
}

func (c *Client) ChecksReRequestCheckSuite(ctx context.Context, checkSuiteID int64) (*github.Response, error) {
	return c.Checks.ReRequestCheckSuite(ctx, c.Owner, c.Project, checkSuiteID)
}

func (c *Client) GitGetBlob(ctx context.Context, sha string) (*github.Blob, *github.Response, error) {
	return c.Git.GetBlob(ctx, c.Owner, c.Project, sha)
}

func (c *Client) GitGetBlobRaw(ctx context.Context, sha string) ([]byte, *github.Response, error) {
	return c.Git.GetBlobRaw(ctx, c.Owner, c.Project, sha)
}

func (c *Client) GitCreateBlob(ctx context.Context, blob *github.Blob) (*github.Blob, *github.Response, error) {
	return c.Git.CreateBlob(ctx, c.Owner, c.Project, blob)
}

func (c *Client) GitGetCommit(ctx context.Context, sha string) (*github.Commit, *github.Response, error) {
	return c.Git.GetCommit(ctx, c.Owner, c.Project, sha)
}

func (c *Client) GitCreateCommit(ctx context.Context, commit *github.Commit) (*github.Commit, *github.Response, error) {
	return c.Git.CreateCommit(ctx, c.Owner, c.Project, commit)
}

func (c *Client) GitGetRef(ctx context.Context, ref string) (*github.Reference, *github.Response, error) {
	return c.Git.GetRef(ctx, c.Owner, c.Project, ref)
}

func (c *Client) GitGetRefs(ctx context.Context, ref string) ([]*github.Reference, *github.Response, error) {
	return c.Git.GetRefs(ctx, c.Owner, c.Project, ref)
}

func (c *Client) GitListRefs(ctx context.Context, opts *github.ReferenceListOptions) ([]*github.Reference, *github.Response, error) {
	return c.Git.ListRefs(ctx, c.Owner, c.Project, opts)
}

func (c *Client) GitCreateRef(ctx context.Context, ref *github.Reference) (*github.Reference, *github.Response, error) {
	return c.Git.CreateRef(ctx, c.Owner, c.Project, ref)
}

func (c *Client) GitUpdateRef(ctx context.Context, ref *github.Reference, force bool) (*github.Reference, *github.Response, error) {
	return c.Git.UpdateRef(ctx, c.Owner, c.Project, ref, force)
}

func (c *Client) GitDeleteRef(ctx context.Context, ref string) (*github.Response, error) {
	return c.Git.DeleteRef(ctx, c.Owner, c.Project, ref)
}

func (c *Client) GitGetTag(ctx context.Context, sha string) (*github.Tag, *github.Response, error) {
	return c.Git.GetTag(ctx, c.Owner, c.Project, sha)
}

func (c *Client) GitCreateTag(ctx context.Context, tag *github.Tag) (*github.Tag, *github.Response, error) {
	return c.Git.CreateTag(ctx, c.Owner, c.Project, tag)
}

func (c *Client) GitGetTree(ctx context.Context, sha string, recursive bool) (*github.Tree, *github.Response, error) {
	return c.Git.GetTree(ctx, c.Owner, c.Project, sha, recursive)
}

func (c *Client) GitCreateTree(ctx context.Context, baseTree string, entries []*github.TreeEntry) (*github.Tree, *github.Response, error) {
	return c.Git.CreateTree(ctx, c.Owner, c.Project, baseTree, entries)
}

func (c *Client) InteractionsGetRestrictionsForRepo(ctx context.Context) (*github.InteractionRestriction, *github.Response, error) {
	return c.Interactions.GetRestrictionsForRepo(ctx, c.Owner, c.Project)
}

func (c *Client) InteractionsUpdateRestrictionsForRepo(ctx context.Context, limit string) (*github.InteractionRestriction, *github.Response, error) {
	return c.Interactions.UpdateRestrictionsForRepo(ctx, c.Owner, c.Project, limit)
}

func (c *Client) InteractionsRemoveRestrictionsFromRepo(ctx context.Context) (*github.Response, error) {
	return c.Interactions.RemoveRestrictionsFromRepo(ctx, c.Owner, c.Project)
}

func (c *Client) IssuesListByRepo(ctx context.Context, opts *github.IssueListByRepoOptions) ([]*github.Issue, *github.Response, error) {
	return c.Issues.ListByRepo(ctx, c.Owner, c.Project, opts)
}

func (c *Client) IssuesGet(ctx context.Context, number int) (*github.Issue, *github.Response, error) {
	return c.Issues.Get(ctx, c.Owner, c.Project, number)
}

func (c *Client) IssuesCreate(ctx context.Context, issue *github.IssueRequest) (*github.Issue, *github.Response, error) {
	return c.Issues.Create(ctx, c.Owner, c.Project, issue)
}

func (c *Client) IssuesEdit(ctx context.Context, number int, issue *github.IssueRequest) (*github.Issue, *github.Response, error) {
	return c.Issues.Edit(ctx, c.Owner, c.Project, number, issue)
}

func (c *Client) IssuesLock(ctx context.Context, number int, opts *github.LockIssueOptions) (*github.Response, error) {
	return c.Issues.Lock(ctx, c.Owner, c.Project, number, opts)
}

func (c *Client) IssuesUnlock(ctx context.Context, number int) (*github.Response, error) {
	return c.Issues.Unlock(ctx, c.Owner, c.Project, number)
}

func (c *Client) IssuesListAssignees(ctx context.Context, opts *github.ListOptions) ([]*github.User, *github.Response, error) {
	return c.Issues.ListAssignees(ctx, c.Owner, c.Project, opts)
}

func (c *Client) IssuesIsAssignee(ctx context.Context, user string) (bool, *github.Response, error) {
	return c.Issues.IsAssignee(ctx, c.Owner, c.Project, user)
}

func (c *Client) IssuesAddAssignees(ctx context.Context, number int, assignees []string) (*github.Issue, *github.Response, error) {
	return c.Issues.AddAssignees(ctx, c.Owner, c.Project, number, assignees)
}

func (c *Client) IssuesRemoveAssignees(ctx context.Context, number int, assignees []string) (*github.Issue, *github.Response, error) {
	return c.Issues.RemoveAssignees(ctx, c.Owner, c.Project, number, assignees)
}

func (c *Client) IssuesListComments(ctx context.Context, number int, opts *github.IssueListCommentsOptions) ([]*github.IssueComment, *github.Response, error) {
	return c.Issues.ListComments(ctx, c.Owner, c.Project, number, opts)
}

func (c *Client) IssuesGetComment(ctx context.Context, commentID int64) (*github.IssueComment, *github.Response, error) {
	return c.Issues.GetComment(ctx, c.Owner, c.Project, commentID)
}

func (c *Client) IssuesCreateComment(ctx context.Context, number int, comment *github.IssueComment) (*github.IssueComment, *github.Response, error) {
	return c.Issues.CreateComment(ctx, c.Owner, c.Project, number, comment)
}

func (c *Client) IssuesEditComment(ctx context.Context, commentID int64, comment *github.IssueComment) (*github.IssueComment, *github.Response, error) {
	return c.Issues.EditComment(ctx, c.Owner, c.Project, commentID, comment)
}

func (c *Client) IssuesDeleteComment(ctx context.Context, commentID int64) (*github.Response, error) {
	return c.Issues.DeleteComment(ctx, c.Owner, c.Project, commentID)
}

func (c *Client) IssuesListIssueEvents(ctx context.Context, number int, opts *github.ListOptions) ([]*github.IssueEvent, *github.Response, error) {
	return c.Issues.ListIssueEvents(ctx, c.Owner, c.Project, number, opts)
}

func (c *Client) IssuesListRepositoryEvents(ctx context.Context, opts *github.ListOptions) ([]*github.IssueEvent, *github.Response, error) {
	return c.Issues.ListRepositoryEvents(ctx, c.Owner, c.Project, opts)
}

func (c *Client) IssuesGetEvent(ctx context.Context, id int64) (*github.IssueEvent, *github.Response, error) {
	return c.Issues.GetEvent(ctx, c.Owner, c.Project, id)
}

func (c *Client) IssuesListLabels(ctx context.Context, opts *github.ListOptions) ([]*github.Label, *github.Response, error) {
	return c.Issues.ListLabels(ctx, c.Owner, c.Project, opts)
}

func (c *Client) IssuesGetLabel(ctx context.Context, name string) (*github.Label, *github.Response, error) {
	return c.Issues.GetLabel(ctx, c.Owner, c.Project, name)
}

func (c *Client) IssuesCreateLabel(ctx context.Context, label *github.Label) (*github.Label, *github.Response, error) {
	return c.Issues.CreateLabel(ctx, c.Owner, c.Project, label)
}

func (c *Client) IssuesEditLabel(ctx context.Context, name string, label *github.Label) (*github.Label, *github.Response, error) {
	return c.Issues.EditLabel(ctx, c.Owner, c.Project, name, label)
}

func (c *Client) IssuesDeleteLabel(ctx context.Context, name string) (*github.Response, error) {
	return c.Issues.DeleteLabel(ctx, c.Owner, c.Project, name)
}

func (c *Client) IssuesListLabelsByIssue(ctx context.Context, number int, opts *github.ListOptions) ([]*github.Label, *github.Response, error) {
	return c.Issues.ListLabelsByIssue(ctx, c.Owner, c.Project, number, opts)
}

func (c *Client) IssuesAddLabelsToIssue(ctx context.Context, number int, labels []string) ([]*github.Label, *github.Response, error) {
	return c.Issues.AddLabelsToIssue(ctx, c.Owner, c.Project, number, labels)
}

func (c *Client) IssuesRemoveLabelForIssue(ctx context.Context, number int, label string) (*github.Response, error) {
	return c.Issues.RemoveLabelForIssue(ctx, c.Owner, c.Project, number, label)
}

func (c *Client) IssuesReplaceLabelsForIssue(ctx context.Context, number int, labels []string) ([]*github.Label, *github.Response, error) {
	return c.Issues.ReplaceLabelsForIssue(ctx, c.Owner, c.Project, number, labels)
}

func (c *Client) IssuesRemoveLabelsForIssue(ctx context.Context, number int) (*github.Response, error) {
	return c.Issues.RemoveLabelsForIssue(ctx, c.Owner, c.Project, number)
}

func (c *Client) IssuesListLabelsForMilestone(ctx context.Context, number int, opts *github.ListOptions) ([]*github.Label, *github.Response, error) {
	return c.Issues.ListLabelsForMilestone(ctx, c.Owner, c.Project, number, opts)
}

func (c *Client) IssuesListMilestones(ctx context.Context, opts *github.MilestoneListOptions) ([]*github.Milestone, *github.Response, error) {
	return c.Issues.ListMilestones(ctx, c.Owner, c.Project, opts)
}

func (c *Client) IssuesGetMilestone(ctx context.Context, number int) (*github.Milestone, *github.Response, error) {
	return c.Issues.GetMilestone(ctx, c.Owner, c.Project, number)
}

func (c *Client) IssuesCreateMilestone(ctx context.Context, milestone *github.Milestone) (*github.Milestone, *github.Response, error) {
	return c.Issues.CreateMilestone(ctx, c.Owner, c.Project, milestone)
}

func (c *Client) IssuesEditMilestone(ctx context.Context, number int, milestone *github.Milestone) (*github.Milestone, *github.Response, error) {
	return c.Issues.EditMilestone(ctx, c.Owner, c.Project, number, milestone)
}

func (c *Client) IssuesDeleteMilestone(ctx context.Context, number int) (*github.Response, error) {
	return c.Issues.DeleteMilestone(ctx, c.Owner, c.Project, number)
}

func (c *Client) IssuesListIssueTimeline(ctx context.Context, number int, opts *github.ListOptions) ([]*github.Timeline, *github.Response, error) {
	return c.Issues.ListIssueTimeline(ctx, c.Owner, c.Project, number, opts)
}

func (c *Client) MigrationsStartImport(ctx context.Context, in *github.Import) (*github.Import, *github.Response, error) {
	return c.Migrations.StartImport(ctx, c.Owner, c.Project, in)
}

func (c *Client) MigrationsImportProgress(ctx context.Context) (*github.Import, *github.Response, error) {
	return c.Migrations.ImportProgress(ctx, c.Owner, c.Project)
}

func (c *Client) MigrationsUpdateImport(ctx context.Context, in *github.Import) (*github.Import, *github.Response, error) {
	return c.Migrations.UpdateImport(ctx, c.Owner, c.Project, in)
}

func (c *Client) MigrationsCommitAuthors(ctx context.Context) ([]*github.SourceImportAuthor, *github.Response, error) {
	return c.Migrations.CommitAuthors(ctx, c.Owner, c.Project)
}

func (c *Client) MigrationsMapCommitAuthor(ctx context.Context, id int64, author *github.SourceImportAuthor) (*github.SourceImportAuthor, *github.Response, error) {
	return c.Migrations.MapCommitAuthor(ctx, c.Owner, c.Project, id, author)
}

func (c *Client) MigrationsSetLFSPreference(ctx context.Context, in *github.Import) (*github.Import, *github.Response, error) {
	return c.Migrations.SetLFSPreference(ctx, c.Owner, c.Project, in)
}

func (c *Client) MigrationsLargeFiles(ctx context.Context) ([]*github.LargeFile, *github.Response, error) {
	return c.Migrations.LargeFiles(ctx, c.Owner, c.Project)
}

func (c *Client) MigrationsCancelImport(ctx context.Context) (*github.Response, error) {
	return c.Migrations.CancelImport(ctx, c.Owner, c.Project)
}

func (c *Client) PullRequestsList(ctx context.Context, opts *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error) {
	return c.PullRequests.List(ctx, c.Owner, c.Project, opts)
}

func (c *Client) PullRequestsListPullRequestsWithCommit(ctx context.Context, sha string, opts *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error) {
	return c.PullRequests.ListPullRequestsWithCommit(ctx, c.Owner, c.Project, sha, opts)
}

func (c *Client) PullRequestsGet(ctx context.Context, number int) (*github.PullRequest, *github.Response, error) {
	return c.PullRequests.Get(ctx, c.Owner, c.Project, number)
}

func (c *Client) PullRequestsGetRaw(ctx context.Context, number int, opts github.RawOptions) (string, *github.Response, error) {
	return c.PullRequests.GetRaw(ctx, c.Owner, c.Project, number, opts)
}

func (c *Client) PullRequestsCreate(ctx context.Context, pull *github.NewPullRequest) (*github.PullRequest, *github.Response, error) {
	return c.PullRequests.Create(ctx, c.Owner, c.Project, pull)
}

func (c *Client) PullRequestsUpdateBranch(ctx context.Context, number int, opts *github.PullRequestBranchUpdateOptions) (*github.PullRequestBranchUpdateResponse, *github.Response, error) {
	return c.PullRequests.UpdateBranch(ctx, c.Owner, c.Project, number, opts)
}

func (c *Client) PullRequestsEdit(ctx context.Context, number int, pull *github.PullRequest) (*github.PullRequest, *github.Response, error) {
	return c.PullRequests.Edit(ctx, c.Owner, c.Project, number, pull)
}

func (c *Client) PullRequestsListCommits(ctx context.Context, number int, opts *github.ListOptions) ([]*github.RepositoryCommit, *github.Response, error) {
	return c.PullRequests.ListCommits(ctx, c.Owner, c.Project, number, opts)
}

func (c *Client) PullRequestsListFiles(ctx context.Context, number int, opts *github.ListOptions) ([]*github.CommitFile, *github.Response, error) {
	return c.PullRequests.ListFiles(ctx, c.Owner, c.Project, number, opts)
}

func (c *Client) PullRequestsIsMerged(ctx context.Context, number int) (bool, *github.Response, error) {
	return c.PullRequests.IsMerged(ctx, c.Owner, c.Project, number)
}

func (c *Client) PullRequestsMerge(ctx context.Context, number int, commitMessage string, options *github.PullRequestOptions) (*github.PullRequestMergeResult, *github.Response, error) {
	return c.PullRequests.Merge(ctx, c.Owner, c.Project, number, commitMessage, options)
}

func (c *Client) PullRequestsListComments(ctx context.Context, number int, opts *github.PullRequestListCommentsOptions) ([]*github.PullRequestComment, *github.Response, error) {
	return c.PullRequests.ListComments(ctx, c.Owner, c.Project, number, opts)
}

func (c *Client) PullRequestsGetComment(ctx context.Context, commentID int64) (*github.PullRequestComment, *github.Response, error) {
	return c.PullRequests.GetComment(ctx, c.Owner, c.Project, commentID)
}

func (c *Client) PullRequestsCreateComment(ctx context.Context, number int, comment *github.PullRequestComment) (*github.PullRequestComment, *github.Response, error) {
	return c.PullRequests.CreateComment(ctx, c.Owner, c.Project, number, comment)
}

func (c *Client) PullRequestsCreateCommentInReplyTo(ctx context.Context, number int, body string, commentID int64) (*github.PullRequestComment, *github.Response, error) {
	return c.PullRequests.CreateCommentInReplyTo(ctx, c.Owner, c.Project, number, body, commentID)
}

func (c *Client) PullRequestsEditComment(ctx context.Context, commentID int64, comment *github.PullRequestComment) (*github.PullRequestComment, *github.Response, error) {
	return c.PullRequests.EditComment(ctx, c.Owner, c.Project, commentID, comment)
}

func (c *Client) PullRequestsDeleteComment(ctx context.Context, commentID int64) (*github.Response, error) {
	return c.PullRequests.DeleteComment(ctx, c.Owner, c.Project, commentID)
}

func (c *Client) PullRequestsRequestReviewers(ctx context.Context, number int, reviewers github.ReviewersRequest) (*github.PullRequest, *github.Response, error) {
	return c.PullRequests.RequestReviewers(ctx, c.Owner, c.Project, number, reviewers)
}

func (c *Client) PullRequestsListReviewers(ctx context.Context, number int, opts *github.ListOptions) (*github.Reviewers, *github.Response, error) {
	return c.PullRequests.ListReviewers(ctx, c.Owner, c.Project, number, opts)
}

func (c *Client) PullRequestsRemoveReviewers(ctx context.Context, number int, reviewers github.ReviewersRequest) (*github.Response, error) {
	return c.PullRequests.RemoveReviewers(ctx, c.Owner, c.Project, number, reviewers)
}

func (c *Client) PullRequestsListReviews(ctx context.Context, number int, opts *github.ListOptions) ([]*github.PullRequestReview, *github.Response, error) {
	return c.PullRequests.ListReviews(ctx, c.Owner, c.Project, number, opts)
}

func (c *Client) PullRequestsGetReview(ctx context.Context, number int, reviewID int64) (*github.PullRequestReview, *github.Response, error) {
	return c.PullRequests.GetReview(ctx, c.Owner, c.Project, number, reviewID)
}

func (c *Client) PullRequestsDeletePendingReview(ctx context.Context, number int, reviewID int64) (*github.PullRequestReview, *github.Response, error) {
	return c.PullRequests.DeletePendingReview(ctx, c.Owner, c.Project, number, reviewID)
}

func (c *Client) PullRequestsListReviewComments(ctx context.Context, number int, reviewID int64, opts *github.ListOptions) ([]*github.PullRequestComment, *github.Response, error) {
	return c.PullRequests.ListReviewComments(ctx, c.Owner, c.Project, number, reviewID, opts)
}

func (c *Client) PullRequestsCreateReview(ctx context.Context, number int, review *github.PullRequestReviewRequest) (*github.PullRequestReview, *github.Response, error) {
	return c.PullRequests.CreateReview(ctx, c.Owner, c.Project, number, review)
}

func (c *Client) PullRequestsUpdateReview(ctx context.Context, number int, reviewID int64, body string) (*github.PullRequestReview, *github.Response, error) {
	return c.PullRequests.UpdateReview(ctx, c.Owner, c.Project, number, reviewID, body)
}

func (c *Client) PullRequestsSubmitReview(ctx context.Context, number int, reviewID int64, review *github.PullRequestReviewRequest) (*github.PullRequestReview, *github.Response, error) {
	return c.PullRequests.SubmitReview(ctx, c.Owner, c.Project, number, reviewID, review)
}

func (c *Client) PullRequestsDismissReview(ctx context.Context, number int, reviewID int64, review *github.PullRequestReviewDismissalRequest) (*github.PullRequestReview, *github.Response, error) {
	return c.PullRequests.DismissReview(ctx, c.Owner, c.Project, number, reviewID, review)
}

func (c *Client) ReactionsListCommentReactions(ctx context.Context, id int64, opts *github.ListCommentReactionOptions) ([]*github.Reaction, *github.Response, error) {
	return c.Reactions.ListCommentReactions(ctx, c.Owner, c.Project, id, opts)
}

func (c *Client) ReactionsCreateCommentReaction(ctx context.Context, id int64, content string) (*github.Reaction, *github.Response, error) {
	return c.Reactions.CreateCommentReaction(ctx, c.Owner, c.Project, id, content)
}

func (c *Client) ReactionsDeleteCommentReaction(ctx context.Context, commentID int64, reactionID int64) (*github.Response, error) {
	return c.Reactions.DeleteCommentReaction(ctx, c.Owner, c.Project, commentID, reactionID)
}

func (c *Client) ReactionsListIssueReactions(ctx context.Context, number int, opts *github.ListOptions) ([]*github.Reaction, *github.Response, error) {
	return c.Reactions.ListIssueReactions(ctx, c.Owner, c.Project, number, opts)
}

func (c *Client) ReactionsCreateIssueReaction(ctx context.Context, number int, content string) (*github.Reaction, *github.Response, error) {
	return c.Reactions.CreateIssueReaction(ctx, c.Owner, c.Project, number, content)
}

func (c *Client) ReactionsDeleteIssueReaction(ctx context.Context, issueNumber int, reactionID int64) (*github.Response, error) {
	return c.Reactions.DeleteIssueReaction(ctx, c.Owner, c.Project, issueNumber, reactionID)
}

func (c *Client) ReactionsListIssueCommentReactions(ctx context.Context, id int64, opts *github.ListOptions) ([]*github.Reaction, *github.Response, error) {
	return c.Reactions.ListIssueCommentReactions(ctx, c.Owner, c.Project, id, opts)
}

func (c *Client) ReactionsCreateIssueCommentReaction(ctx context.Context, id int64, content string) (*github.Reaction, *github.Response, error) {
	return c.Reactions.CreateIssueCommentReaction(ctx, c.Owner, c.Project, id, content)
}

func (c *Client) ReactionsDeleteIssueCommentReaction(ctx context.Context, commentID int64, reactionID int64) (*github.Response, error) {
	return c.Reactions.DeleteIssueCommentReaction(ctx, c.Owner, c.Project, commentID, reactionID)
}

func (c *Client) ReactionsListPullRequestCommentReactions(ctx context.Context, id int64, opts *github.ListOptions) ([]*github.Reaction, *github.Response, error) {
	return c.Reactions.ListPullRequestCommentReactions(ctx, c.Owner, c.Project, id, opts)
}

func (c *Client) ReactionsCreatePullRequestCommentReaction(ctx context.Context, id int64, content string) (*github.Reaction, *github.Response, error) {
	return c.Reactions.CreatePullRequestCommentReaction(ctx, c.Owner, c.Project, id, content)
}

func (c *Client) ReactionsDeletePullRequestCommentReaction(ctx context.Context, commentID int64, reactionID int64) (*github.Response, error) {
	return c.Reactions.DeletePullRequestCommentReaction(ctx, c.Owner, c.Project, commentID, reactionID)
}

func (c *Client) RepositoriesGet(ctx context.Context) (*github.Repository, *github.Response, error) {
	return c.Repositories.Get(ctx, c.Owner, c.Project)
}

func (c *Client) RepositoriesGetCodeOfConduct(ctx context.Context) (*github.CodeOfConduct, *github.Response, error) {
	return c.Repositories.GetCodeOfConduct(ctx, c.Owner, c.Project)
}

func (c *Client) RepositoriesEdit(ctx context.Context, repository *github.Repository) (*github.Repository, *github.Response, error) {
	return c.Repositories.Edit(ctx, c.Owner, c.Project, repository)
}

func (c *Client) RepositoriesDelete(ctx context.Context) (*github.Response, error) {
	return c.Repositories.Delete(ctx, c.Owner, c.Project)
}

func (c *Client) RepositoriesListLanguages(ctx context.Context) (map[string]int, *github.Response, error) {
	return c.Repositories.ListLanguages(ctx, c.Owner, c.Project)
}

func (c *Client) RepositoriesListTeams(ctx context.Context, opts *github.ListOptions) ([]*github.Team, *github.Response, error) {
	return c.Repositories.ListTeams(ctx, c.Owner, c.Project, opts)
}

func (c *Client) RepositoriesListTags(ctx context.Context, opts *github.ListOptions) ([]*github.RepositoryTag, *github.Response, error) {
	return c.Repositories.ListTags(ctx, c.Owner, c.Project, opts)
}

func (c *Client) RepositoriesListBranches(ctx context.Context, opts *github.BranchListOptions) ([]*github.Branch, *github.Response, error) {
	return c.Repositories.ListBranches(ctx, c.Owner, c.Project, opts)
}

func (c *Client) RepositoriesGetBranch(ctx context.Context, branch string) (*github.Branch, *github.Response, error) {
	return c.Repositories.GetBranch(ctx, c.Owner, c.Project, branch)
}

func (c *Client) RepositoriesGetBranchProtection(ctx context.Context, branch string) (*github.Protection, *github.Response, error) {
	return c.Repositories.GetBranchProtection(ctx, c.Owner, c.Project, branch)
}

func (c *Client) RepositoriesGetRequiredStatusChecks(ctx context.Context, branch string) (*github.RequiredStatusChecks, *github.Response, error) {
	return c.Repositories.GetRequiredStatusChecks(ctx, c.Owner, c.Project, branch)
}

func (c *Client) RepositoriesListRequiredStatusChecksContexts(ctx context.Context, branch string) (contexts []string, resp *github.Response, err error) {
	return c.Repositories.ListRequiredStatusChecksContexts(ctx, c.Owner, c.Project, branch)
}

func (c *Client) RepositoriesUpdateBranchProtection(ctx context.Context, branch string, preq *github.ProtectionRequest) (*github.Protection, *github.Response, error) {
	return c.Repositories.UpdateBranchProtection(ctx, c.Owner, c.Project, branch, preq)
}

func (c *Client) RepositoriesRemoveBranchProtection(ctx context.Context, branch string) (*github.Response, error) {
	return c.Repositories.RemoveBranchProtection(ctx, c.Owner, c.Project, branch)
}

func (c *Client) RepositoriesGetSignaturesProtectedBranch(ctx context.Context, branch string) (*github.SignaturesProtectedBranch, *github.Response, error) {
	return c.Repositories.GetSignaturesProtectedBranch(ctx, c.Owner, c.Project, branch)
}

func (c *Client) RepositoriesRequireSignaturesOnProtectedBranch(ctx context.Context, branch string) (*github.SignaturesProtectedBranch, *github.Response, error) {
	return c.Repositories.RequireSignaturesOnProtectedBranch(ctx, c.Owner, c.Project, branch)
}

func (c *Client) RepositoriesOptionalSignaturesOnProtectedBranch(ctx context.Context, branch string) (*github.Response, error) {
	return c.Repositories.OptionalSignaturesOnProtectedBranch(ctx, c.Owner, c.Project, branch)
}

func (c *Client) RepositoriesUpdateRequiredStatusChecks(ctx context.Context, branch string, sreq *github.RequiredStatusChecksRequest) (*github.RequiredStatusChecks, *github.Response, error) {
	return c.Repositories.UpdateRequiredStatusChecks(ctx, c.Owner, c.Project, branch, sreq)
}

func (c *Client) RepositoriesLicense(ctx context.Context) (*github.RepositoryLicense, *github.Response, error) {
	return c.Repositories.License(ctx, c.Owner, c.Project)
}

func (c *Client) RepositoriesGetPullRequestReviewEnforcement(ctx context.Context, branch string) (*github.PullRequestReviewsEnforcement, *github.Response, error) {
	return c.Repositories.GetPullRequestReviewEnforcement(ctx, c.Owner, c.Project, branch)
}

func (c *Client) RepositoriesUpdatePullRequestReviewEnforcement(ctx context.Context, branch string, patch *github.PullRequestReviewsEnforcementUpdate) (*github.PullRequestReviewsEnforcement, *github.Response, error) {
	return c.Repositories.UpdatePullRequestReviewEnforcement(ctx, c.Owner, c.Project, branch, patch)
}

func (c *Client) RepositoriesDisableDismissalRestrictions(ctx context.Context, branch string) (*github.PullRequestReviewsEnforcement, *github.Response, error) {
	return c.Repositories.DisableDismissalRestrictions(ctx, c.Owner, c.Project, branch)
}

func (c *Client) RepositoriesRemovePullRequestReviewEnforcement(ctx context.Context, branch string) (*github.Response, error) {
	return c.Repositories.RemovePullRequestReviewEnforcement(ctx, c.Owner, c.Project, branch)
}

func (c *Client) RepositoriesGetAdminEnforcement(ctx context.Context, branch string) (*github.AdminEnforcement, *github.Response, error) {
	return c.Repositories.GetAdminEnforcement(ctx, c.Owner, c.Project, branch)
}

func (c *Client) RepositoriesAddAdminEnforcement(ctx context.Context, branch string) (*github.AdminEnforcement, *github.Response, error) {
	return c.Repositories.AddAdminEnforcement(ctx, c.Owner, c.Project, branch)
}

func (c *Client) RepositoriesRemoveAdminEnforcement(ctx context.Context, branch string) (*github.Response, error) {
	return c.Repositories.RemoveAdminEnforcement(ctx, c.Owner, c.Project, branch)
}

func (c *Client) RepositoriesListAllTopics(ctx context.Context) ([]string, *github.Response, error) {
	return c.Repositories.ListAllTopics(ctx, c.Owner, c.Project)
}

func (c *Client) RepositoriesReplaceAllTopics(ctx context.Context, topics []string) ([]string, *github.Response, error) {
	return c.Repositories.ReplaceAllTopics(ctx, c.Owner, c.Project, topics)
}

func (c *Client) RepositoriesListApps(ctx context.Context, branch string) ([]*github.App, *github.Response, error) {
	return c.Repositories.ListApps(ctx, c.Owner, c.Project, branch)
}

func (c *Client) RepositoriesReplaceAppRestrictions(ctx context.Context, branch string, slug []string) ([]*github.App, *github.Response, error) {
	return c.Repositories.ReplaceAppRestrictions(ctx, c.Owner, c.Project, branch, slug)
}

func (c *Client) RepositoriesAddAppRestrictions(ctx context.Context, branch string, slug []string) ([]*github.App, *github.Response, error) {
	return c.Repositories.AddAppRestrictions(ctx, c.Owner, c.Project, branch, slug)
}

func (c *Client) RepositoriesRemoveAppRestrictions(ctx context.Context, branch string, slug []string) ([]*github.App, *github.Response, error) {
	return c.Repositories.RemoveAppRestrictions(ctx, c.Owner, c.Project, branch, slug)
}

func (c *Client) RepositoriesTransfer(ctx context.Context, transfer github.TransferRequest) (*github.Repository, *github.Response, error) {
	return c.Repositories.Transfer(ctx, c.Owner, c.Project, transfer)
}

func (c *Client) RepositoriesDispatch(ctx context.Context, opts github.DispatchRequestOptions) (*github.Repository, *github.Response, error) {
	return c.Repositories.Dispatch(ctx, c.Owner, c.Project, opts)
}

func (c *Client) RepositoriesListCollaborators(ctx context.Context, opts *github.ListCollaboratorsOptions) ([]*github.User, *github.Response, error) {
	return c.Repositories.ListCollaborators(ctx, c.Owner, c.Project, opts)
}

func (c *Client) RepositoriesIsCollaborator(ctx context.Context, user string) (bool, *github.Response, error) {
	return c.Repositories.IsCollaborator(ctx, c.Owner, c.Project, user)
}

func (c *Client) RepositoriesGetPermissionLevel(ctx context.Context, user string) (*github.RepositoryPermissionLevel, *github.Response, error) {
	return c.Repositories.GetPermissionLevel(ctx, c.Owner, c.Project, user)
}

func (c *Client) RepositoriesAddCollaborator(ctx context.Context, user string, opts *github.RepositoryAddCollaboratorOptions) (*github.CollaboratorInvitation, *github.Response, error) {
	return c.Repositories.AddCollaborator(ctx, c.Owner, c.Project, user, opts)
}

func (c *Client) RepositoriesRemoveCollaborator(ctx context.Context, user string) (*github.Response, error) {
	return c.Repositories.RemoveCollaborator(ctx, c.Owner, c.Project, user)
}

func (c *Client) RepositoriesListComments(ctx context.Context, opts *github.ListOptions) ([]*github.RepositoryComment, *github.Response, error) {
	return c.Repositories.ListComments(ctx, c.Owner, c.Project, opts)
}

func (c *Client) RepositoriesListCommitComments(ctx context.Context, sha string, opts *github.ListOptions) ([]*github.RepositoryComment, *github.Response, error) {
	return c.Repositories.ListCommitComments(ctx, c.Owner, c.Project, sha, opts)
}

func (c *Client) RepositoriesCreateComment(ctx context.Context, sha string, comment *github.RepositoryComment) (*github.RepositoryComment, *github.Response, error) {
	return c.Repositories.CreateComment(ctx, c.Owner, c.Project, sha, comment)
}

func (c *Client) RepositoriesGetComment(ctx context.Context, id int64) (*github.RepositoryComment, *github.Response, error) {
	return c.Repositories.GetComment(ctx, c.Owner, c.Project, id)
}

func (c *Client) RepositoriesUpdateComment(ctx context.Context, id int64, comment *github.RepositoryComment) (*github.RepositoryComment, *github.Response, error) {
	return c.Repositories.UpdateComment(ctx, c.Owner, c.Project, id, comment)
}

func (c *Client) RepositoriesDeleteComment(ctx context.Context, id int64) (*github.Response, error) {
	return c.Repositories.DeleteComment(ctx, c.Owner, c.Project, id)
}

func (c *Client) RepositoriesListCommits(ctx context.Context, opts *github.CommitsListOptions) ([]*github.RepositoryCommit, *github.Response, error) {
	return c.Repositories.ListCommits(ctx, c.Owner, c.Project, opts)
}

func (c *Client) RepositoriesGetCommit(ctx context.Context, sha string) (*github.RepositoryCommit, *github.Response, error) {
	return c.Repositories.GetCommit(ctx, c.Owner, c.Project, sha)
}

func (c *Client) RepositoriesGetCommitRaw(ctx context.Context, sha string, opts github.RawOptions) (string, *github.Response, error) {
	return c.Repositories.GetCommitRaw(ctx, c.Owner, c.Project, sha, opts)
}

func (c *Client) RepositoriesGetCommitSHA1(ctx context.Context, ref string, lastSHA string) (string, *github.Response, error) {
	return c.Repositories.GetCommitSHA1(ctx, c.Owner, c.Project, ref, lastSHA)
}

func (c *Client) RepositoriesCompareCommits(ctx context.Context, base string, head string) (*github.CommitsComparison, *github.Response, error) {
	return c.Repositories.CompareCommits(ctx, c.Owner, c.Project, base, head)
}

func (c *Client) RepositoriesListBranchesHeadCommit(ctx context.Context, sha string) ([]*github.BranchCommit, *github.Response, error) {
	return c.Repositories.ListBranchesHeadCommit(ctx, c.Owner, c.Project, sha)
}

func (c *Client) RepositoriesGetCommunityHealthMetrics(ctx context.Context) (*github.CommunityHealthMetrics, *github.Response, error) {
	return c.Repositories.GetCommunityHealthMetrics(ctx, c.Owner, c.Project)
}

func (c *Client) RepositoriesGetReadme(ctx context.Context, opts *github.RepositoryContentGetOptions) (*github.RepositoryContent, *github.Response, error) {
	return c.Repositories.GetReadme(ctx, c.Owner, c.Project, opts)
}

func (c *Client) RepositoriesDownloadContents(ctx context.Context, filepath string, opts *github.RepositoryContentGetOptions) (io.ReadCloser, error) {
	return c.Repositories.DownloadContents(ctx, c.Owner, c.Project, filepath, opts)
}

func (c *Client) RepositoriesGetContents(ctx context.Context, path string, opts *github.RepositoryContentGetOptions) (fileContent *github.RepositoryContent, directoryContent []*github.RepositoryContent, resp *github.Response, err error) {
	return c.Repositories.GetContents(ctx, c.Owner, c.Project, path, opts)
}

func (c *Client) RepositoriesCreateFile(ctx context.Context, path string, opts *github.RepositoryContentFileOptions) (*github.RepositoryContentResponse, *github.Response, error) {
	return c.Repositories.CreateFile(ctx, c.Owner, c.Project, path, opts)
}

func (c *Client) RepositoriesUpdateFile(ctx context.Context, path string, opts *github.RepositoryContentFileOptions) (*github.RepositoryContentResponse, *github.Response, error) {
	return c.Repositories.UpdateFile(ctx, c.Owner, c.Project, path, opts)
}

func (c *Client) RepositoriesDeleteFile(ctx context.Context, path string, opts *github.RepositoryContentFileOptions) (*github.RepositoryContentResponse, *github.Response, error) {
	return c.Repositories.DeleteFile(ctx, c.Owner, c.Project, path, opts)
}

func (c *Client) RepositoriesListDeployments(ctx context.Context, opts *github.DeploymentsListOptions) ([]*github.Deployment, *github.Response, error) {
	return c.Repositories.ListDeployments(ctx, c.Owner, c.Project, opts)
}

func (c *Client) RepositoriesGetDeployment(ctx context.Context, deploymentID int64) (*github.Deployment, *github.Response, error) {
	return c.Repositories.GetDeployment(ctx, c.Owner, c.Project, deploymentID)
}

func (c *Client) RepositoriesCreateDeployment(ctx context.Context, request *github.DeploymentRequest) (*github.Deployment, *github.Response, error) {
	return c.Repositories.CreateDeployment(ctx, c.Owner, c.Project, request)
}

func (c *Client) RepositoriesListDeploymentStatuses(ctx context.Context, deployment int64, opts *github.ListOptions) ([]*github.DeploymentStatus, *github.Response, error) {
	return c.Repositories.ListDeploymentStatuses(ctx, c.Owner, c.Project, deployment, opts)
}

func (c *Client) RepositoriesGetDeploymentStatus(ctx context.Context, deploymentID int64, deploymentStatusID int64) (*github.DeploymentStatus, *github.Response, error) {
	return c.Repositories.GetDeploymentStatus(ctx, c.Owner, c.Project, deploymentID, deploymentStatusID)
}

func (c *Client) RepositoriesCreateDeploymentStatus(ctx context.Context, deployment int64, request *github.DeploymentStatusRequest) (*github.DeploymentStatus, *github.Response, error) {
	return c.Repositories.CreateDeploymentStatus(ctx, c.Owner, c.Project, deployment, request)
}

func (c *Client) RepositoriesListForks(ctx context.Context, opts *github.RepositoryListForksOptions) ([]*github.Repository, *github.Response, error) {
	return c.Repositories.ListForks(ctx, c.Owner, c.Project, opts)
}

func (c *Client) RepositoriesCreateFork(ctx context.Context, opts *github.RepositoryCreateForkOptions) (*github.Repository, *github.Response, error) {
	return c.Repositories.CreateFork(ctx, c.Owner, c.Project, opts)
}

func (c *Client) RepositoriesCreateHook(ctx context.Context, hook *github.Hook) (*github.Hook, *github.Response, error) {
	return c.Repositories.CreateHook(ctx, c.Owner, c.Project, hook)
}

func (c *Client) RepositoriesListHooks(ctx context.Context, opts *github.ListOptions) ([]*github.Hook, *github.Response, error) {
	return c.Repositories.ListHooks(ctx, c.Owner, c.Project, opts)
}

func (c *Client) RepositoriesGetHook(ctx context.Context, id int64) (*github.Hook, *github.Response, error) {
	return c.Repositories.GetHook(ctx, c.Owner, c.Project, id)
}

func (c *Client) RepositoriesEditHook(ctx context.Context, id int64, hook *github.Hook) (*github.Hook, *github.Response, error) {
	return c.Repositories.EditHook(ctx, c.Owner, c.Project, id, hook)
}

func (c *Client) RepositoriesDeleteHook(ctx context.Context, id int64) (*github.Response, error) {
	return c.Repositories.DeleteHook(ctx, c.Owner, c.Project, id)
}

func (c *Client) RepositoriesPingHook(ctx context.Context, id int64) (*github.Response, error) {
	return c.Repositories.PingHook(ctx, c.Owner, c.Project, id)
}

func (c *Client) RepositoriesTestHook(ctx context.Context, id int64) (*github.Response, error) {
	return c.Repositories.TestHook(ctx, c.Owner, c.Project, id)
}

func (c *Client) RepositoriesListInvitations(ctx context.Context, opts *github.ListOptions) ([]*github.RepositoryInvitation, *github.Response, error) {
	return c.Repositories.ListInvitations(ctx, c.Owner, c.Project, opts)
}

func (c *Client) RepositoriesDeleteInvitation(ctx context.Context, invitationID int64) (*github.Response, error) {
	return c.Repositories.DeleteInvitation(ctx, c.Owner, c.Project, invitationID)
}

func (c *Client) RepositoriesUpdateInvitation(ctx context.Context, invitationID int64, permissions string) (*github.RepositoryInvitation, *github.Response, error) {
	return c.Repositories.UpdateInvitation(ctx, c.Owner, c.Project, invitationID, permissions)
}

func (c *Client) RepositoriesListKeys(ctx context.Context, opts *github.ListOptions) ([]*github.Key, *github.Response, error) {
	return c.Repositories.ListKeys(ctx, c.Owner, c.Project, opts)
}

func (c *Client) RepositoriesGetKey(ctx context.Context, id int64) (*github.Key, *github.Response, error) {
	return c.Repositories.GetKey(ctx, c.Owner, c.Project, id)
}

func (c *Client) RepositoriesCreateKey(ctx context.Context, key *github.Key) (*github.Key, *github.Response, error) {
	return c.Repositories.CreateKey(ctx, c.Owner, c.Project, key)
}

func (c *Client) RepositoriesDeleteKey(ctx context.Context, id int64) (*github.Response, error) {
	return c.Repositories.DeleteKey(ctx, c.Owner, c.Project, id)
}

func (c *Client) RepositoriesMerge(ctx context.Context, request *github.RepositoryMergeRequest) (*github.RepositoryCommit, *github.Response, error) {
	return c.Repositories.Merge(ctx, c.Owner, c.Project, request)
}

func (c *Client) RepositoriesEnablePages(ctx context.Context, pages *github.Pages) (*github.Pages, *github.Response, error) {
	return c.Repositories.EnablePages(ctx, c.Owner, c.Project, pages)
}

func (c *Client) RepositoriesUpdatePages(ctx context.Context, opts *github.PagesUpdate) (*github.Response, error) {
	return c.Repositories.UpdatePages(ctx, c.Owner, c.Project, opts)
}

func (c *Client) RepositoriesDisablePages(ctx context.Context) (*github.Response, error) {
	return c.Repositories.DisablePages(ctx, c.Owner, c.Project)
}

func (c *Client) RepositoriesGetPagesInfo(ctx context.Context) (*github.Pages, *github.Response, error) {
	return c.Repositories.GetPagesInfo(ctx, c.Owner, c.Project)
}

func (c *Client) RepositoriesListPagesBuilds(ctx context.Context, opts *github.ListOptions) ([]*github.PagesBuild, *github.Response, error) {
	return c.Repositories.ListPagesBuilds(ctx, c.Owner, c.Project, opts)
}

func (c *Client) RepositoriesGetLatestPagesBuild(ctx context.Context) (*github.PagesBuild, *github.Response, error) {
	return c.Repositories.GetLatestPagesBuild(ctx, c.Owner, c.Project)
}

func (c *Client) RepositoriesGetPageBuild(ctx context.Context, id int64) (*github.PagesBuild, *github.Response, error) {
	return c.Repositories.GetPageBuild(ctx, c.Owner, c.Project, id)
}

func (c *Client) RepositoriesRequestPageBuild(ctx context.Context) (*github.PagesBuild, *github.Response, error) {
	return c.Repositories.RequestPageBuild(ctx, c.Owner, c.Project)
}

func (c *Client) RepositoriesListPreReceiveHooks(ctx context.Context, opts *github.ListOptions) ([]*github.PreReceiveHook, *github.Response, error) {
	return c.Repositories.ListPreReceiveHooks(ctx, c.Owner, c.Project, opts)
}

func (c *Client) RepositoriesGetPreReceiveHook(ctx context.Context, id int64) (*github.PreReceiveHook, *github.Response, error) {
	return c.Repositories.GetPreReceiveHook(ctx, c.Owner, c.Project, id)
}

func (c *Client) RepositoriesUpdatePreReceiveHook(ctx context.Context, id int64, hook *github.PreReceiveHook) (*github.PreReceiveHook, *github.Response, error) {
	return c.Repositories.UpdatePreReceiveHook(ctx, c.Owner, c.Project, id, hook)
}

func (c *Client) RepositoriesDeletePreReceiveHook(ctx context.Context, id int64) (*github.Response, error) {
	return c.Repositories.DeletePreReceiveHook(ctx, c.Owner, c.Project, id)
}

func (c *Client) RepositoriesListProjects(ctx context.Context, opts *github.ProjectListOptions) ([]*github.Project, *github.Response, error) {
	return c.Repositories.ListProjects(ctx, c.Owner, c.Project, opts)
}

func (c *Client) RepositoriesCreateProject(ctx context.Context, opts *github.ProjectOptions) (*github.Project, *github.Response, error) {
	return c.Repositories.CreateProject(ctx, c.Owner, c.Project, opts)
}

func (c *Client) RepositoriesListReleases(ctx context.Context, opts *github.ListOptions) ([]*github.RepositoryRelease, *github.Response, error) {
	return c.Repositories.ListReleases(ctx, c.Owner, c.Project, opts)
}

func (c *Client) RepositoriesGetRelease(ctx context.Context, id int64) (*github.RepositoryRelease, *github.Response, error) {
	return c.Repositories.GetRelease(ctx, c.Owner, c.Project, id)
}

func (c *Client) RepositoriesGetLatestRelease(ctx context.Context) (*github.RepositoryRelease, *github.Response, error) {
	return c.Repositories.GetLatestRelease(ctx, c.Owner, c.Project)
}

func (c *Client) RepositoriesGetReleaseByTag(ctx context.Context, tag string) (*github.RepositoryRelease, *github.Response, error) {
	return c.Repositories.GetReleaseByTag(ctx, c.Owner, c.Project, tag)
}

func (c *Client) RepositoriesCreateRelease(ctx context.Context, release *github.RepositoryRelease) (*github.RepositoryRelease, *github.Response, error) {
	return c.Repositories.CreateRelease(ctx, c.Owner, c.Project, release)
}

func (c *Client) RepositoriesEditRelease(ctx context.Context, id int64, release *github.RepositoryRelease) (*github.RepositoryRelease, *github.Response, error) {
	return c.Repositories.EditRelease(ctx, c.Owner, c.Project, id, release)
}

func (c *Client) RepositoriesDeleteRelease(ctx context.Context, id int64) (*github.Response, error) {
	return c.Repositories.DeleteRelease(ctx, c.Owner, c.Project, id)
}

func (c *Client) RepositoriesListReleaseAssets(ctx context.Context, id int64, opts *github.ListOptions) ([]*github.ReleaseAsset, *github.Response, error) {
	return c.Repositories.ListReleaseAssets(ctx, c.Owner, c.Project, id, opts)
}

func (c *Client) RepositoriesGetReleaseAsset(ctx context.Context, id int64) (*github.ReleaseAsset, *github.Response, error) {
	return c.Repositories.GetReleaseAsset(ctx, c.Owner, c.Project, id)
}

func (c *Client) RepositoriesDownloadReleaseAsset(ctx context.Context, id int64, followRedirectsClient *http.Client) (rc io.ReadCloser, redirectURL string, err error) {
	return c.Repositories.DownloadReleaseAsset(ctx, c.Owner, c.Project, id, followRedirectsClient)
}

func (c *Client) RepositoriesEditReleaseAsset(ctx context.Context, id int64, release *github.ReleaseAsset) (*github.ReleaseAsset, *github.Response, error) {
	return c.Repositories.EditReleaseAsset(ctx, c.Owner, c.Project, id, release)
}

func (c *Client) RepositoriesDeleteReleaseAsset(ctx context.Context, id int64) (*github.Response, error) {
	return c.Repositories.DeleteReleaseAsset(ctx, c.Owner, c.Project, id)
}

func (c *Client) RepositoriesUploadReleaseAsset(ctx context.Context, id int64, opts *github.UploadOptions, file *os.File) (*github.ReleaseAsset, *github.Response, error) {
	return c.Repositories.UploadReleaseAsset(ctx, c.Owner, c.Project, id, opts, file)
}

func (c *Client) RepositoriesListContributorsStats(ctx context.Context) ([]*github.ContributorStats, *github.Response, error) {
	return c.Repositories.ListContributorsStats(ctx, c.Owner, c.Project)
}

func (c *Client) RepositoriesListCommitActivity(ctx context.Context) ([]*github.WeeklyCommitActivity, *github.Response, error) {
	return c.Repositories.ListCommitActivity(ctx, c.Owner, c.Project)
}

func (c *Client) RepositoriesListCodeFrequency(ctx context.Context) ([]*github.WeeklyStats, *github.Response, error) {
	return c.Repositories.ListCodeFrequency(ctx, c.Owner, c.Project)
}

func (c *Client) RepositoriesListParticipation(ctx context.Context) (*github.RepositoryParticipation, *github.Response, error) {
	return c.Repositories.ListParticipation(ctx, c.Owner, c.Project)
}

func (c *Client) RepositoriesListPunchCard(ctx context.Context) ([]*github.PunchCard, *github.Response, error) {
	return c.Repositories.ListPunchCard(ctx, c.Owner, c.Project)
}

func (c *Client) RepositoriesListStatuses(ctx context.Context, ref string, opts *github.ListOptions) ([]*github.RepoStatus, *github.Response, error) {
	return c.Repositories.ListStatuses(ctx, c.Owner, c.Project, ref, opts)
}

func (c *Client) RepositoriesCreateStatus(ctx context.Context, ref string, status *github.RepoStatus) (*github.RepoStatus, *github.Response, error) {
	return c.Repositories.CreateStatus(ctx, c.Owner, c.Project, ref, status)
}

func (c *Client) RepositoriesGetCombinedStatus(ctx context.Context, ref string, opts *github.ListOptions) (*github.CombinedStatus, *github.Response, error) {
	return c.Repositories.GetCombinedStatus(ctx, c.Owner, c.Project, ref, opts)
}

func (c *Client) RepositoriesListTrafficReferrers(ctx context.Context) ([]*github.TrafficReferrer, *github.Response, error) {
	return c.Repositories.ListTrafficReferrers(ctx, c.Owner, c.Project)
}

func (c *Client) RepositoriesListTrafficPaths(ctx context.Context) ([]*github.TrafficPath, *github.Response, error) {
	return c.Repositories.ListTrafficPaths(ctx, c.Owner, c.Project)
}

func (c *Client) RepositoriesListTrafficViews(ctx context.Context, opts *github.TrafficBreakdownOptions) (*github.TrafficViews, *github.Response, error) {
	return c.Repositories.ListTrafficViews(ctx, c.Owner, c.Project, opts)
}

func (c *Client) RepositoriesListTrafficClones(ctx context.Context, opts *github.TrafficBreakdownOptions) (*github.TrafficClones, *github.Response, error) {
	return c.Repositories.ListTrafficClones(ctx, c.Owner, c.Project, opts)
}
